[project]
name = "pygeoops"
dynamic = ["version"]

authors = [
  { name="Pieter Roggemans", email="pieter.roggemans@gmail.com" },
]
description = "Library with some less common or extended spatial functions"
readme = "README.md"
license = "BSD-3-Clause"
requires-python = ">=3.10"
classifiers = [
    "Programming Language :: Python :: 3",
    "Operating System :: OS Independent",
]
# Any dependencies added here should also be added to build-system.requires
dependencies = [
    "geopandas>=0.12.1",
    "numpy",
    "pyproj",
    "shapely>1",
    "topojson",
]
keywords = ["GIS", "cartography", "pandas", "shapely", "geopandas"]

[project.optional-dependencies]
# development dependency groups
full = ["simplification"]

[project.urls]
"Homepage" = "https://github.com/pygeoops/pygeoops"
"Bug Tracker" = "https://github.com/pygeoops/pygeoops/issues"

[build-system]
# All required runtime dependencies necessary as well to be able to get the __version__
requires = [
    "setuptools>=68.0",
    "geopandas>=0.12.1",
    "numpy",
    "pyproj",
    "shapely>1",
    "topojson",
]
build-backend = "setuptools.build_meta"

[tool.setuptools.dynamic]
version = {attr = "pygeoops.__version__"}

[tool.setuptools]
packages = ["pygeoops"]

[tool.mypy]
[[tool.mypy.overrides]]
module = "geofileops.*,geopandas.*,matplotlib.*,setuptools.*,simplification.*,shapely.*,topojson.*"
ignore_missing_imports = true

[tool.pyright]
exclude = ["local_ignore"]
ignore = ["*"]

[tool.pytest.ini_options]
pythonpath = "."
testpaths = [
    "tests",
]

[tool.ruff]
line-length = 88

[tool.ruff.lint]
select = [
    # pyflakes
    "F",
    # pycodestyle
    "E",
    "W",
    # flake8-2020
    "YTT",
    # flake8-bugbear
    "B",
    # flake8-quotes
    "Q",
    # flake8-debugger
    "T10",
    # flake8-gettext
    "INT",
    # pylint
    "PLC",
    "PLE",
    "PLR",
    "PLW",
    # misc lints
    "PIE",
    # flake8-pyi
    "PYI",
    # tidy imports
    "TID",
    # implicit string concatenation
    "ISC",
    # type-checking imports
    "TCH",
    # comprehensions
    "C4",
    # pygrep-hooks
    "PGH",
    # Ruff-specific rules
    "RUF",
    # pyupgrade
    "UP",
    # pydocstyle
    "D",
]

ignore = [ # space before : (needed for how black formats slicing)
    # "E203",  # not yet implemented
    # do not assign a lambda expression, use a def
    "E731",
    # line break before binary operator
    # "W503",  # not yet implemented
    # line break after binary operator
    # "W504",  # not yet implemented
    # controversial
    "B006",
    # controversial
    "B007",
    # controversial
    "B008",
    # setattr is used to side-step mypy
    "B009",
    # getattr is used to side-step mypy
    "B010",
    # tests use assert False
    "B011",
    # tests use comparisons but not their returned value
    "B015",
    # false positives
    "B019",
    # Loop control variable overrides iterable it iterates
    "B020",
    # Function definition does not bind loop variable
    "B023",
    # Functions defined inside a loop must not use variables redefined in the loop
    # "B301",  # not yet implemented
    # Only works with python >=3.10
    "B905",
    # Too many arguments to function call
    "PLR0913",
    # Too many returns
    "PLR0911",
    # Too many branches
    "PLR0912",
    # Too many statements
    "PLR0915",
    # Redefined loop name
    "PLW2901",
    # Global statements are discouraged
    "PLW0603",
    # Docstrings should not be included in stubs
    "PYI021",
    # No builtin `eval()` allowed
    "PGH001",
    # compare-to-empty-string
    "PLC1901",
    # Use typing_extensions.TypeAlias for type aliases
    # "PYI026",  # not yet implemented
    # Use "collections.abc.*" instead of "typing.*" (PEP 585 syntax)
    # "PYI027",  # not yet implemented
    # while int | float can be shortened to float, the former is more explicit
    # "PYI041",  # not yet implemented

    # Additional checks that don't pass yet
    # Useless statement
    "B018",
    # Within an except clause, raise exceptions with ...
    "B904",
    # Magic number
    "PLR2004",
    # Consider `elif` instead of `else` then `if` to remove indentation level
    "PLR5501",
    # ambiguous-unicode-character-string
    "RUF001",
    # ambiguous-unicode-character-docstring
    "RUF002",
    # ambiguous-unicode-character-comment
    "RUF003",
    # collection-literal-concatenation
    "RUF005",
    # pairwise-over-zipped (>=PY310 only)
    "RUF007",
    # explicit-f-string-type-conversion
    "RUF010",
    # One-line docstring should fit on one line
    "D200",
    # Multi-line docstring summary should start at the first line
    "D212",
]
exclude = ["docs/*"]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["D"]
"benchmark/*" = ["D"]

[tool.ruff.lint.pydocstyle]
convention = "google"
